package services;

import UI.AdminActions;
import entities.*;
import entities.Persons.*;
import entities.Persons.creation.Specialization;
import factories.*;
import storage.*;
import strategies.*;

import java.util.List;
import java.util.Scanner;

import static entities.Persons.Human.getPersonalInfo;
import static strategies.SelectSpecialization.getSelectedSpecialization;

public class AdminService implements AdminActions {
    @Override
    public void addDoctor() {
        System.out.println("–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ª—ñ–∫–∞—Ä—è:");
        Human personalInfo = getPersonalInfo();
        Specialization specialization = getSelectedSpecialization();

        Doctor newDoctor = new DoctorFactory().create(personalInfo.getFirstName(), personalInfo.getLastName(),
                personalInfo.getPhoneNumber(), personalInfo.getSex(), specialization);
        DoctorRepository.getInstance().addDoctor(newDoctor);

        System.out.println("–õ—ñ–∫–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π: " + newDoctor);
    }
    @Override
    public void addPatient() {
        System.out.println("–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞:");

        Human personalInfo = getPersonalInfo();
        Patient newPatient = new PatientFactory().create(personalInfo.getFirstName(), personalInfo.getLastName(),
                personalInfo.getPhoneNumber(), personalInfo.getSex(), null);
        MedicalRecord medicalRecord = new MedicalRecordFactory().create(newPatient.getID());
        newPatient.setMedicalRecord(medicalRecord);

        PatientRepository.getInstance().addPatient(newPatient);
        System.out.println("–ü–∞—Ü—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π: " + newPatient);
    }

    @Override
    public void removeDoctor() {
        DoctorRemover doctorRemover = new DoctorRemover();
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ–∫–∞—Ä—è: \n1. –ó–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é \n2. –ó–∞ —ñ–º‚Äô—è–º —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º \n3. –í–∏–π—Ç–∏");
            if (!sc.hasNextInt()) {
                System.out.println("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.");
                sc.next();
                continue;
            }

            int choice = sc.nextInt();
            sc.nextLine();
            switch (choice) {
                case 1 -> {
                    Specialization specialization = getSelectedSpecialization();
                    if (specialization!= null) {
                        doctorRemover.removeBySpecialization(specialization);
                    }
                }
                case 2 -> {
                    System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ª—ñ–∫–∞—Ä—è: ");
                    String firstName = sc.nextLine().trim();
                    System.out.print("–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –ª—ñ–∫–∞—Ä—è: ");
                    String lastName = sc.nextLine().trim();
                    doctorRemover.removeByName(firstName, lastName);
                }
                case 3 -> {
                    System.out.println("–í–∏—Ö—ñ–¥.");
                    return;
                }
                default -> System.out.println("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }
        }
    }

    @Override
    public void removePatient() {
        PatientRemover patientRemover = new PatientRemover();
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø–∞—Ü—ñ—î–Ω—Ç–∞: ");
        String firstName = sc.nextLine().trim();
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –ø–∞—Ü—ñ—î–Ω—Ç–∞: ");
        String lastName = sc.nextLine().trim();
        patientRemover.removeByName(firstName, lastName);}

    @Override
    public void viewALlAppointments() {
        System.out.printf("%-15s %-15s %-15s %-20s",
                "ID –ó–∞–ø–∏—Å—É", "ID –ü–∞—Ü—ñ—î–Ω—Ç–∞", "ID –õ—ñ–∫–∞—Ä—è", "–î–∞—Ç–∞ –ø—Ä–∏–π–æ–º—É");
        List<Appointment> all = AppointmentRepository.getInstance().getAllAppointments();
        if (all.isEmpty()) System.out.println("üîé –ó–∞–ø–∏—Å—ñ–≤ —â–µ –Ω–µ–º–∞—î.");
         else all.forEach(System.out::println);}

    @Override
    public void managePatients() {
    System.out.printf("%-10s %-15s %-15s %-15s %-10s %-20s%n",
            "ID", "–Ü–º'—è", "–ü—Ä—ñ–∑–≤–∏—â–µ", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—Ç–∞—Ç—å", "ID –º–µ–¥. –∫–∞—Ä—Ç–∏");
        PatientRepository.getInstance().getAllPatients().forEach(System.out::println);
}
    @Override
    public void allDoctors() {
        System.out.printf("%-10s %-15s %-15s %-15s %-10s %-20s%n",
                "ID", "–Ü–º'—è", "–ü—Ä—ñ–∑–≤–∏—â–µ", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—Ç–∞—Ç—å", "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è");
        DoctorRepository.getInstance().getAllDoctors().forEach(System.out::println);
    }

    @Override
    public void generateReport() {
        Scanner sc = new Scanner(System.in);
        System.out.println("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥–∞—Ç—É (00-00-0000)");
        String date = sc.nextLine();
        ReportService  reportService = new ReportService();
        reportService.generateAdminReport(date);
        sc.close();}
}

